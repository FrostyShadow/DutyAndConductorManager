// <auto-generated />
using System;
using DutyAndConductorManager.Blazor.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DutyAndConductorManager.Blazor.Server.Migrations
{
    [DbContext(typeof(DutyAndConductorContext))]
    [Migration("20201203192320_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.BrigadeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("ServiceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("VehicleSetId");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.BrigadeUserEntity", b =>
                {
                    b.Property<int>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.HasKey("BrigadeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BrigadeUsers");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.LineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LineTypeId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.LineTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LineTypes");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.NotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.NotificationRecipientEntity", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationRecipients");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.SetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SetEntity");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.SetVehicleEntity", b =>
                {
                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("SetId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SetVehicleEntity");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.UserDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTrained")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActiveDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.VehicleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("CanCouple")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.VehicleTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.BrigadeEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.LineEntity", "Line")
                        .WithMany("Brigades")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.SetEntity", "Set")
                        .WithMany("Brigades")
                        .HasForeignKey("VehicleSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.BrigadeUserEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.BrigadeEntity", "Brigade")
                        .WithMany("BrigadeUsers")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", "User")
                        .WithMany("BrigadeUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brigade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.LineEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.LineTypeEntity", "LineType")
                        .WithMany("Lines")
                        .HasForeignKey("LineTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LineType");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.NotificationEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.NotificationRecipientEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.NotificationEntity", "Notification")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", "User")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.SetVehicleEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.SetEntity", "Set")
                        .WithMany("SetVehicles")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.VehicleEntity", "Vehicle")
                        .WithMany("SetVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Set");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.UserDataEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", "User")
                        .WithOne("UserData")
                        .HasForeignKey("DutyAndConductorManager.Blazor.Server.Entities.UserDataEntity", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.VehicleEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.VehicleTypeEntity", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.BrigadeEntity", b =>
                {
                    b.Navigation("BrigadeUsers");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.LineEntity", b =>
                {
                    b.Navigation("Brigades");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.LineTypeEntity", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.NotificationEntity", b =>
                {
                    b.Navigation("NotificationRecipients");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.SetEntity", b =>
                {
                    b.Navigation("Brigades");

                    b.Navigation("SetVehicles");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.UserEntity", b =>
                {
                    b.Navigation("BrigadeUsers");

                    b.Navigation("NotificationRecipients");

                    b.Navigation("Notifications");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.VehicleEntity", b =>
                {
                    b.Navigation("SetVehicles");
                });

            modelBuilder.Entity("DutyAndConductorManager.Blazor.Server.Entities.VehicleTypeEntity", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
